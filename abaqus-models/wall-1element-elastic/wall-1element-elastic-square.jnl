# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=10.0)
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], ))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(2.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(3.0, 6.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.5, 5.0))
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.5, 5.0), 
    point2=(2.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[11], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[26], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[23], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[22], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[24], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[25], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[2], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[8], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[5], ))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], points=((2.0, 
    5.0), (2.0, 5.0), (2.375, 5.625), (2.625, 5.75), (2.75, 5.875), (3.0, 
    6.0)))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], points=((0.5, 
    0.0), (0.5, 0.0), (0.625, 1.5), (0.625, 2.125), (0.25, 2.5), (0.0, 2.75), (
    0.0, 3.0)))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='wall', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['wall'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='steel')
mdb.models['Model-1'].materials['steel'].Elastic(table=((200000000000.0, 0.3), 
    ))
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='steel', name='wall', numIntPts=5, 
    poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=GRADIENT, 
    thickness=0.01, thicknessField='', thicknessModulus=None, thicknessType=
    UNIFORM, useDensity=OFF)
mdb.models['Model-1'].parts['wall'].MaterialOrientation(additionalRotationType=
    ROTATION_NONE, axis=AXIS_3, fieldName='', localCsys=None, orientationType=
    GLOBAL, region=Region(
    faces=mdb.models['Model-1'].parts['wall'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), )), stackDirection=STACK_3)
mdb.models['Model-1'].sections['wall'].setValues(idealization=NO_IDEALIZATION, 
    integrationRule=GAUSS, material='steel', numIntPts=3, preIntegrate=OFF, 
    thickness=0.01, thicknessField='', thicknessType=UNIFORM)
del mdb.models['Model-1'].parts['wall']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 3.0), point2=(
    2.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(2.0, 0.0), point2=(
    3.0, 5.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(3.0, 5.0), point2=(
    0.5, 5.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.5, 5.0), point2=(
    0.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], points=((3.0, 
    5.0), (3.0, 5.0), (2.875, 5.625), (3.0, 5.875), (3.0, 6.0), (3.0, 6.0), (
    3.0, 5.875), (3.0, 6.0)))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[8]))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 3.0), point2=(
    2.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(2.0, 0.0), point2=(
    3.0, 6.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(3.0, 6.0), point2=(
    0.5, 5.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.5, 5.0), point2=(
    0.0, 3.0))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='wall', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['wall'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
del mdb.models['Model-1'].sections['wall']
mdb.models['Model-1'].HomogeneousSolidSection(material='steel', name='wall', 
    thickness=0.01)
mdb.models['Model-1'].parts['wall'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['wall'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), )), sectionName='wall', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['wall'].MaterialOrientation(additionalRotationType=
    ROTATION_NONE, axis=AXIS_3, fieldName='', localCsys=None, orientationType=
    GLOBAL, region=Region(
    faces=mdb.models['Model-1'].parts['wall'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), )), stackDirection=STACK_3)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='wall-1', part=
    mdb.models['Model-1'].parts['wall'])
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'E', 'U', 'RF', 'CF'))
mdb.models['Model-1'].ConcentratedForce(cf1=2000000.0, cf2=-1500000.0, 
    createStepName='Step-1', distributionType=UNIFORM, field='', localCsys=None
    , name='Load-1', region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['wall-1'].vertices.getSequenceFromMask(
    mask=('[#8 ]', ), )))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['wall-1'].vertices.getSequenceFromMask(
    mask=('[#6 ]', ), )), u1=0.0, u2=0.0, ur3=0.0)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['wall-1'], ), size=5.0)
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['wall-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['wall-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['wall-1'], ))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='wall-1element-elastic', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['wall-1element-elastic'].submit(consistencyChecking=OFF)
mdb.jobs['wall-1element-elastic']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-F028AA0', 'handle': 0, 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\wall-1element-elastic.odb', 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-F028AA0', 'handle': 10944, 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'wall-1element-elastic', 'severe': 0, 
    'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['wall-1element-elastic']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'wall-1element-elastic', 
    'memory': 24.0})
mdb.jobs['wall-1element-elastic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'wall-1element-elastic', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['wall-1element-elastic']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(JOB_COMPLETED, {
    'time': 'Thu Jun 22 14:31:20 2023', 'jobName': 'wall-1element-elastic'})
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['wall'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['wall'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['wall'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7], points=((0.5, 5.0), 
    (0.5, 5.0), (-0.5, 4.75), (-0.625, 4.625), (-0.75, 4.375), (-0.875, 4.125), 
    (-1.0, 4.0), (-1.125, 4.0), (-1.0, 4.0), (-1.0, 4.0)))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], points=((0.0, 3.0), 
    (0.0, 3.0), (-0.75, 2.45644497871399), (-0.875, 2.18139290809631), (-1.0, 
    2.0), (-1.0, 2.0)))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7], points=((-1.0, 
    4.0), (-1.0, 4.0), (-1.31390833854675, 3.5), (-1.5, 3.0), (-1.625, 2.75), (
    -1.625, 2.5481288433075), (-1.625, 2.29927229881287), (-1.67952084541321, 
    2.125), (-1.75, 2.0), (-1.875, 1.875), (-1.81009650230408, 1.875), (-1.625, 
    1.91943883895874), (-1.41836905479431, 1.91943883895874), (-1.25, 
    1.91943883895874), (-1.0, 1.875), (-1.0, 1.81465709209442), (-1.0, 1.625), 
    (-1.0, 1.5), (-1.0, 1.30384612083435), (-1.0, 1.125), (-1.0, 1.0), (-1.0, 
    1.375), (-1.0, 2.625), (-1.0, 3.56975030899048), (-0.875, 3.875), (-0.875, 
    3.875), (-1.05275702476501, 3.375), (-1.125, 3.125), (-1.18333268165588, 
    2.94106030464172)))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[4], points=((-1.0, 
    2.0), (-1.0, 2.0), (-1.5, -0.5), (-1.625, -1.875), (-2.0, -2.25), (-2.0, 
    -2.25)))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[7], points=((
    -1.18333268165588, 2.94106030464172), (-1.125, 3.0), (-1.625, 2.125), (
    -1.875, 1.5), (-2.0, 1.5)))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[5], points=((2.0, 0.0), 
    (2.0, 0.0), (2.125, -1.25), (2.125, -1.75), (2.375, -2.25), (2.125, 
    -2.125)))
mdb.models['Model-1'].sketches['__edit__'].dragEntity(entity=
    mdb.models['Model-1'].sketches['__edit__'].vertices[6], points=((3.0, 6.0), 
    (3.0, 6.0), (3.0, 2.875), (2.75, 2.125), (1.625, 2.125), (1.375, 1.875), (
    1.625, 1.75), (2.0, 1.5), (2.125, 1.5), (1.625, 1.5), (1.25, 1.5), (1.0, 
    1.375), (1.0, 1.375), (1.0, 1.375)))
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[9]))
mdb.models['Model-1'].sketches['__edit__'].rectangle(point1=(-1.0, 1.0), 
    point2=(1.0, -1.0))
mdb.models['Model-1'].parts['wall'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['wall'].regenerate()
mdb.models['Model-1'].parts['wall'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['wall'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), )), sectionName='wall', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['wall'].materialOrientations[0].setValues(region=
    Region(faces=mdb.models['Model-1'].parts['wall'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['wall-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['wall-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['wall-1'], ))
mdb.models['Model-1'].loads['Load-1'].setValues(distributionType=UNIFORM, 
    field='', region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['wall-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['wall-1'].vertices.getSequenceFromMask(
    mask=('[#c ]', ), )))
mdb.jobs['wall-1element-elastic'].submit(consistencyChecking=OFF)
mdb.jobs['wall-1element-elastic']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-F028AA0', 'handle': 0, 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\wall-1element-elastic.odb', 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-F028AA0', 'handle': 436, 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'wall-1element-elastic', 'severe': 0, 
    'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['wall-1element-elastic']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'wall-1element-elastic', 
    'memory': 24.0})
mdb.jobs['wall-1element-elastic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'wall-1element-elastic', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['wall-1element-elastic']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(JOB_COMPLETED, {
    'time': 'Thu Jun 22 15:40:22 2023', 'jobName': 'wall-1element-elastic'})
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['wall'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['wall'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['wall'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[12], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[13], 
    mdb.models['Model-1'].sketches['__edit__'].constraints[35], 
    mdb.models['Model-1'].sketches['__edit__'].constraints[36], 
    mdb.models['Model-1'].sketches['__edit__'].constraints[37], 
    mdb.models['Model-1'].sketches['__edit__'].constraints[38], 
    mdb.models['Model-1'].sketches['__edit__'].constraints[39]))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 3.0), point2=(2.0, 
    0.0))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(2.0, 0.0), point2=(3.0, 
    6.0))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(3.0, 6.0), point2=(0.5, 
    5.0))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.5, 5.0), point2=(0.0, 
    3.0))
mdb.models['Model-1'].parts['wall'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['wall'].regenerate()
mdb.models['Model-1'].parts['wall'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['wall'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), )), sectionName='wall', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['wall'].materialOrientations[0].setValues(region=
    Region(faces=mdb.models['Model-1'].parts['wall'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['wall-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['wall-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['wall-1'], ))
mdb.models['Model-1'].loads['Load-1'].setValues(distributionType=UNIFORM, 
    field='', region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['wall-1'].vertices.getSequenceFromMask(
    mask=('[#8 ]', ), )))
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['wall-1'].vertices.getSequenceFromMask(
    mask=('[#6 ]', ), )))
mdb.jobs['wall-1element-elastic'].submit(consistencyChecking=OFF)
mdb.jobs['wall-1element-elastic']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-F028AA0', 'handle': 0, 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\wall-1element-elastic.odb', 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-F028AA0', 'handle': 9920, 
    'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'wall-1element-elastic', 'severe': 0, 
    'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['wall-1element-elastic']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'wall-1element-elastic', 
    'memory': 24.0})
mdb.jobs['wall-1element-elastic']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'wall-1element-elastic', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['wall-1element-elastic']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'wall-1element-elastic'})
mdb.jobs['wall-1element-elastic']._Message(JOB_COMPLETED, {
    'time': 'Thu Jun 22 16:04:13 2023', 'jobName': 'wall-1element-elastic'})
# Save by Hamed on 2023_06_22-17.06.28; build 6.14-1 2014_06_05-02.41.02 134264
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['wall'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['wall'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['wall'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[14], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[15], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[16], 
    mdb.models['Model-1'].sketches['__edit__'].geometry[17]))
mdb.models['Model-1'].sketches['__edit__'].rectangle(point1=(-1.0, 1.0), 
    point2=(1.0, -1.0))
mdb.models['Model-1'].parts['wall'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['wall'].regenerate()
mdb.models['Model-1'].parts['wall'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['wall'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), )), sectionName='wall', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['wall'].materialOrientations[0].setValues(region=
    Region(faces=mdb.models['Model-1'].parts['wall'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['wall-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['wall-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['wall-1'], ))
mdb.models['Model-1'].loads['Load-1'].setValues(distributionType=UNIFORM, 
    field='', region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['wall-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['wall-1'].vertices.getSequenceFromMask(
    mask=('[#c ]', ), )))
mdb.Job(name='wall-1element-elastic-square', objectToCopy=
    mdb.jobs['wall-1element-elastic'])
del mdb.jobs['wall-1element-elastic']
mdb.jobs['wall-1element-elastic-square'].submit(consistencyChecking=OFF)
mdb.jobs['wall-1element-elastic-square']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'DESKTOP-F028AA0', 'handle': 0, 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'DEGREE OF FREEDOM 6 IS NOT ACTIVE IN THIS MODEL AND CANNOT BE RESTRAINED.', 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Temp\\wall-1element-elastic-square.odb', 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'DESKTOP-F028AA0', 'handle': 3696, 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': 0, 'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'wall-1element-elastic-square', 'severe': 0, 
    'iterations': 0, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['wall-1element-elastic-square']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'wall-1element-elastic-square', 
    'memory': 24.0})
mdb.jobs['wall-1element-elastic-square']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'wall-1element-elastic-square', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['wall-1element-elastic-square']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'wall-1element-elastic-square'})
mdb.jobs['wall-1element-elastic-square']._Message(JOB_COMPLETED, {
    'time': 'Thu Jun 22 17:09:13 2023', 
    'jobName': 'wall-1element-elastic-square'})
# Save by Hamed on 2023_06_22-17.14.38; build 6.14-1 2014_06_05-02.41.02 134264
# Save by Hamed on 2023_06_22-17.17.49; build 6.14-1 2014_06_05-02.41.02 134264
